library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity top_level is
	port(
		-- FX2 interface
		fx2Clk_in     : in    std_logic;                    -- 48MHz clock from FX2
		fx2Addr_out   : out   std_logic_vector(1 downto 0); -- select FIFO: "10" for EP6OUT, "11" for EP8IN
		fx2Data_io    : inout std_logic_vector(7 downto 0); -- 8-bit data to/from FX2

		-- When EP6OUT selected:
		fx2Read_out   : out   std_logic;                    -- asserted (active-low) when reading from FX2
		fx2OE_out     : out   std_logic;                    -- asserted (active-low) to tell FX2 to drive bus
		fx2GotData_in : in    std_logic;                    -- asserted (active-high) when FX2 has data for us

		-- When EP8IN selected:
		fx2Write_out  : out   std_logic;                    -- asserted (active-low) when writing to FX2
		fx2GotRoom_in : in    std_logic;                    -- asserted (active-high) when FX2 has room for more data from us
		fx2PktEnd_out : out   std_logic;                    -- asserted (active-low) when a host read needs to be committed early

		-- Onboard peripherals
		led_out       : out   std_logic_vector(7 downto 0); -- eight LEDs
		slide_sw_in   : in    std_logic_vector(7 downto 0)  -- eight slide switches
	);
end top_level;

architecture behavioural of top_level is
	signal state : std_logic_vector(0 downto 0) := "0";
	signal chanAddr  : std_logic_vector(6 downto 0) := "0000000";
	signal address : std_logic_vector(9 downto 0) := "0000000000";
	signal baddress: std_logic_vector(3 downto 0) := "0000";

	-- Host >> FPGA pipe:
	signal h2fData   : std_logic_vector(7 downto 0);
	signal h2fValid  : std_logic; 
	signal h2fReady  : std_logic;                     -- channel logic can drive this low to say "I'm not ready for more data yet"

	-- Host << FPGA pipe:
	signal f2hData   : std_logic_vector(7 downto 0);  -- data lines used when the host reads from a channel
	signal f2hValid  : std_logic;                     -- channel logic can drive this low to say "I don't have data ready for you"
	signal f2hReady  : std_logic;                     -- '1' means "on the next clock rising edge, put your next byte of data on f2hData"

	-- Needed so that the comm_fpga_fx2 module can drive both fx2Read_out and fx2OE_out
	signal fx2Read                 : std_logic;

	-- Registers implementing the channels
	shared variable i ,b ,c: integer := 0;
	signal reg,regb : std_logic_vector(7 downto 0):= "00000000";      
	type ram_t1 is array (0 to 15) of std_logic_vector(7 downto 0);
	type array_1 is array (0 to 15) of std_logic_vector(15 downto 0);
	signal reg_a1,reg_a2,reg_a3,reg_a4,reg_a5,reg_a6,reg_a7,reg_a8,reg_a9,reg_a10,reg_a11,reg_a12,reg_a13,reg_a14,reg_a15,reg_a16 : ram_t1 := (others => (others => '0'));
	signal s:array_1 := (others => (others => '0'));
	
begin													
	process(fx2Clk_in,reg)
	begin
		reg <= reg + 1;
	end process;

	process(chanAddr,state,address,baddress)
	begin
		if(state = "0") then
			address <= address + 1;
			if(address = "0100000000") then
				state <= "1";
			else
				b := to_integer(unsigned(address(3 downto 0)));
			end if;
		else
			baddress <= baddress+1;
			c := to_integer(unsigned(baddress));
		end if;	
	end process;
	
			reg_a1(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "0000";
			reg_a2(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "0001";
			reg_a3(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "0010";
			reg_a4(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "0011";
			reg_a5(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "0100";
			reg_a6(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "0101";
			reg_a7(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "0110";
			reg_a8(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "0111";
			reg_a9(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "1000";
			reg_a10(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "1001";
			reg_a11(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "1010";
			reg_a12(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "1011";
			reg_a13(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "1100";
			reg_a14(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "1101";
			reg_a15(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "1110";
			reg_a16(b) <= h2fData when h2fValid = '1' and state = "0" and address(7 downto 4)= "1111";

			regb <= h2fData when h2fValid = '1' and state = "1";
			
			
			with baddress select
				s(0) <= std_logic_vector(unsigned(reg_a1(c)) * unsigned(regb)) when "0000",
							s(0) + std_logic_vector(unsigned(reg_a1(c)) * unsigned(regb)) when others;
				
			with baddress select
				s(1) <= std_logic_vector(unsigned(reg_a2(c)) * unsigned(regb)) when "0000",
				         s(1) + std_logic_vector(unsigned(reg_a2(c)) * unsigned(regb)) when others;
				
			with baddress select
				s(2) <= std_logic_vector(unsigned(reg_a3(c)) * unsigned(regb)) when "0000",
							s(2) + std_logic_vector(unsigned(reg_a3(c)) * unsigned(regb)) when others;

			with baddress select
				s(3) <= std_logic_vector(unsigned(reg_a4(c)) * unsigned(regb)) when "0000",
							s(3) + std_logic_vector(unsigned(reg_a4(c)) * unsigned(regb)) when others;

			with baddress select
				s(4) <= std_logic_vector(unsigned(reg_a5(c)) * unsigned(regb)) when "0000",
							s(4) + std_logic_vector(unsigned(reg_a5(c)) * unsigned(regb)) when others;
				
			with baddress select
				s(5) <= std_logic_vector(unsigned(reg_a6(c)) * unsigned(regb)) when "0000",
							s(5) + std_logic_vector(unsigned(reg_a6(c)) * unsigned(regb)) when others;
				
			with baddress select
				s(6) <= std_logic_vector(unsigned(reg_a7(c)) * unsigned(regb)) when "0000",
							s(6) + std_logic_vector(unsigned(reg_a7(c)) * unsigned(regb)) when others;

			with baddress select
				s(7) <= std_logic_vector(unsigned(reg_a8(c)) * unsigned(regb)) when "0000",
							s(7) + std_logic_vector(unsigned(reg_a8(c)) * unsigned(regb)) when others;

			with baddress select
				s(8) <= std_logic_vector(unsigned(reg_a9(c)) * unsigned(regb)) when "0000",
							s(8) + std_logic_vector(unsigned(reg_a9(c)) * unsigned(regb)) when others;

			with baddress select
				s(9) <= std_logic_vector(unsigned(reg_a10(c)) * unsigned(regb)) when "0000",
							s(9) + std_logic_vector(unsigned(reg_a10(c)) * unsigned(regb)) when others;

			with baddress select
				s(10) <= std_logic_vector(unsigned(reg_a11(c)) * unsigned(regb)) when "0000",
							s(10) + std_logic_vector(unsigned(reg_a11(c)) * unsigned(regb)) when others;

			with baddress select
				s(11) <= std_logic_vector(unsigned(reg_a12(c)) * unsigned(regb)) when "0000",
							s(11) + std_logic_vector(unsigned(reg_a12(c)) * unsigned(regb)) when others;

			with baddress select
				s(12) <= std_logic_vector(unsigned(reg_a13(c)) * unsigned(regb)) when "0000",
							s(12) + std_logic_vector(unsigned(reg_a13(c)) * unsigned(regb)) when others;

			with baddress select
				s(13) <= std_logic_vector(unsigned(reg_a14(c)) * unsigned(regb)) when "0000",
							s(13) + std_logic_vector(unsigned(reg_a14(c)) * unsigned(regb)) when others;

			with baddress select
				s(14) <= std_logic_vector(unsigned(reg_a15(c)) * unsigned(regb)) when "0000",
							s(14) + std_logic_vector(unsigned(reg_a15(c)) * unsigned(regb)) when others;
				
			with baddress select
				s(15) <= std_logic_vector(unsigned(reg_a16(c)) * unsigned(regb)) when "0000",
							s(15) + std_logic_vector(unsigned(reg_a16(c)) * unsigned(regb)) when others;
				
				
				
       
    		with chanAddr and state select f2hData <=
        		s(0)(7 downto 0)      	when "0000000",
        		s(1)(7 downto 0)      	when "0000001",
        		s(2)(7 downto 0)      	when "0000010",
        		s(3)(7 downto 0)      	when "0000011",
        		s(4)(7 downto 0)      	when "0000100",
        		s(5)(7 downto 0)      	when "0000101",
        		s(6)(7 downto 0)      	when "0000110",
        		s(7)(7 downto 0)      	when "0000111",
        		s(8)(7 downto 0)      	when "0001000",
        		s(9)(7 downto 0)      	when "0001001",
        		s(10)(7 downto 0)      	when "0001010",
        		s(11)(7 downto 0)      	when "0001011",
        		s(12)(7 downto 0)      	when "0001100",
        		s(13)(7 downto 0)      	when "0001101",
        		s(14)(7 downto 0)      	when "0001110",
        		s(15)(7 downto 0)      	when "0001111",
				x"00"		 						when others;

	-- Assert that there's always data for reading, and always room for writing
	f2hValid <= '1';
	h2fReady <= '1';								--END_SNIPPET(registers)

	-- CommFPGA module
	fx2Read_out <= fx2Read;
	fx2OE_out <= fx2Read;
	fx2Addr_out(1) <= '1';  -- Use EP6OUT/EP8IN, not EP2OUT/EP4IN.
	comm_fpga_fx2 : entity work.comm_fpga_fx2
		port map(
			-- FX2 interface
			fx2Clk_in      => fx2Clk_in,
			fx2FifoSel_out => fx2Addr_out(0),
			fx2Data_io     => fx2Data_io,
			fx2Read_out    => fx2Read,
			fx2GotData_in  => fx2GotData_in,
			fx2Write_out   => fx2Write_out,
			fx2GotRoom_in  => fx2GotRoom_in,
			fx2PktEnd_out  => fx2PktEnd_out,

			-- Channel read/write interface
			chanAddr_out   => chanAddr,
			h2fData_out    => h2fData,
			h2fValid_out   => h2fValid,
			h2fReady_in    => h2fReady,
			f2hData_in     => f2hData,
			f2hValid_in    => f2hValid,
			f2hReady_out   => f2hReady
		);

	-- LEDs
	led_out <= reg;
end behavioural;